Closure?

def f(x):
    def g(y):
    	return x + y
    return g

a = f(1)
print a(3)

When it runs a = f(1) it's a closure


Closures
1. A function is declared inside another function.
2. Inner function accesses a variable from the outer function
   (outside of the local scope of the inner function)
3. The external function binds a value to the variabl and finishes (or closes)
   before the inner function can be compleed

   def repeat(s):
       def times(x):
       	   return s * x
       return times

This is an example of a nested function, but NOT a closure because s,
the external variable to times, is not bound to any variable.			

    r1 = repeat("hello")

This creates a closure because repeat runs, binds s to "hello", and then
exits, returning a function (times) with s bound to "hello"

   r1(2)
